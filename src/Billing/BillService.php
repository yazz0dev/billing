<?php // src/Billing/BillService.php

namespace App\Billing;

use App\Product\ProductRepository; // To fetch product details and update stock
use App\Notification\NotificationService;
use App\Core\Database; // For starting sessions
use Exception;

class BillService
{
    private BillRepository $billRepository;
    private ProductRepository $productRepository;
    private NotificationService $notificationService;

    public function __construct()
    {
        $this->billRepository = new BillRepository();
        $this->productRepository = new ProductRepository();
        $this->notificationService = new NotificationService();
    }

    public function generateBill(array $cartItems, string $userId, string $username): array // Returns ['success' => bool, 'billId' => string|null, 'message' => string]
    {
        if (empty($cartItems)) {
            return ['success' => false, 'billId' => null, 'message' => 'Cart is empty. Cannot generate bill.'];
        }

        $dbClient = Database::getClient();
        $dbSession = $dbClient->startSession();

        try {
            $dbSession->startTransaction();

            $billItemsDetails = [];
            $grandTotal = 0;

            foreach ($cartItems as $cartItem) {
                if (!isset($cartItem['product_id'], $cartItem['quantity'], $cartItem['price'])) {
                    throw new Exception("Invalid cart item data.");
                }
                $productId = (string) $cartItem['product_id'];
                $quantity = (int) $cartItem['quantity'];
                $pricePerUnit = (float) $cartItem['price']; // Price from cart, could re-verify from DB

                if ($quantity <= 0) throw new Exception("Invalid quantity for product ID {$productId}.");

                $product = $this->productRepository->findById($productId); // Fetch within transaction
                if (!$product) {
                    throw new Exception("Product with ID {$productId} not found.");
                }
                if ($product->stock < $quantity) {
                    throw new Exception("Insufficient stock for '{$product->name}'. Available: {$product->stock}, Requested: {$quantity}.");
                }

                // Update stock
                $newStock = $product->stock - $quantity;
                $stockUpdateSuccess = $this->productRepository->updateStock($productId, $newStock, $dbSession);
                if (!$stockUpdateSuccess) {
                    throw new Exception("Failed to update stock for '{$product->name}'.");
                }

                $itemTotal = $quantity * $pricePerUnit;
                $grandTotal += $itemTotal;
                $billItemsDetails[] = [
                    'product_id' => new \MongoDB\BSON\ObjectId($productId), // Store as ObjectId
                    'product_name' => $product->name,
                    'quantity' => $quantity,
                    'price_per_unit' => $pricePerUnit,
                    'item_total' => $itemTotal,
                ];

                // Low stock/out of stock notifications
                $lowStockThreshold = $product->low_stock_threshold ?? 5; // Assuming a field or default
                if ($newStock <= $lowStockThreshold && $newStock > 0) {
                    $this->notificationService->create("Low stock: {$product->name} ({$newStock} left).", 'warning', 'admin', 0, "Low Stock Alert");
                } elseif ($newStock == 0) {
                    $this->notificationService->create("Out of stock: {$product->name}.", 'error', 'admin', 0, "Out of Stock");
                }
            }

            $billId = $this->billRepository->createBill($billItemsDetails, $grandTotal, $userId, $username, $dbSession);
            if (!$billId) {
                throw new Exception("Failed to save the bill to the database.");
            }

            $dbSession->commitTransaction();
            $this->notificationService->create(
                "Bill #{$billId} (Amount: â‚¹" . number_format($grandTotal, 2) . ") generated by {$username}.",
                'success', 'admin', 7000, "Bill Generated"
            );

            return ['success' => true, 'billId' => $billId, 'totalAmount' => $grandTotal, 'message' => 'Bill generated successfully.'];

        } catch (Exception $e) {
            if ($dbSession->isInTransaction()) {
                $dbSession->abortTransaction();
            }
            error_log("Bill Generation Error: " . $e->getMessage());
            return ['success' => false, 'billId' => null, 'message' => "Error generating bill: " . $e->getMessage()];
        } finally {
            $dbSession->endSession();
        }
    }

    public function getAllBills(): array
    {
        $billDocs = $this->billRepository->findAll();
        return array_map(fn($doc) => (array) $doc->getArrayCopy(), $billDocs);
    }

    public function getBillById(string $billId): ?array
    {
        $billDoc = $this->billRepository->findById($billId);
        if ($billDoc) {
            // Convert BSONDocument to array, handling nested BSON types if necessary
            $billArray = (array) $billDoc->getArrayCopy();
            // Example: Convert ObjectId and UTCDateTime to strings for API response consistency
            if (isset($billArray['_id']) && $billArray['_id'] instanceof \MongoDB\BSON\ObjectId) {
                $billArray['_id'] = (string) $billArray['_id'];
            }
            if (isset($billArray['user_id']) && $billArray['user_id'] instanceof \MongoDB\BSON\ObjectId) {
                $billArray['user_id'] = (string) $billArray['user_id'];
            }
            if (isset($billArray['created_at']) && $billArray['created_at'] instanceof \MongoDB\BSON\UTCDateTime) {
                $billArray['created_at'] = $billArray['created_at']->toDateTime()->format(DATE_ISO8601);
            }
            if (isset($billArray['items']) && is_array($billArray['items'])) {
                foreach ($billArray['items'] as $key => $item) {
                    if (is_object($item) && method_exists($item, 'getArrayCopy')) {
                         $itemArray = (array) $item->getArrayCopy();
                         if (isset($itemArray['product_id']) && $itemArray['product_id'] instanceof \MongoDB\BSON\ObjectId) {
                            $itemArray['product_id'] = (string) $itemArray['product_id'];
                         }
                         $billArray['items'][$key] = $itemArray;
                    }
                }
            }
            return $billArray;
        }
        return null;
    }
}
