<?php

namespace App\Services;

use App\Models\Bill;
use App\Models\Product;
use App\Services\NotificationService;
use Illuminate\Support\Facades\DB; // For database transactions
use Exception;

class BillService
{
    protected ProductService $productService; // Injected
    protected NotificationService $notificationService; // Injected

    public function __construct(ProductService $productService, NotificationService $notificationService)
    {
        $this->productService = $productService;
        $this->notificationService = $notificationService;
    }

    public function generateBill(array $cartItems, string $userId, string $username): array
    {
        if (empty($cartItems)) {
            return ['success' => false, 'billId' => null, 'message' => 'Cart is empty. Cannot generate bill.'];
        }

        return DB::transaction(function () use ($cartItems, $userId, $username) {
            $billItemsDetails = [];
            $grandTotal = 0;

            foreach ($cartItems as $cartItem) {
                // Validate cartItem structure more robustly if necessary
                $productId = (string) $cartItem['product_id'];
                $quantity = (int) $cartItem['quantity'];
                // Use price from cart as it might be a discounted price at time of POS entry
                $pricePerUnit = (float) $cartItem['price']; 

                if ($quantity <= 0) {
                    throw new Exception("Invalid quantity for product ID {$productId}.");
                }

                $product = Product::findOrFail($productId); // Throws ModelNotFoundException if not found

                if ($product->stock < $quantity) {
                    throw new Exception("Insufficient stock for '{$product->name}'. Available: {$product->stock}, Requested: {$quantity}.");
                }

                $newStock = $product->stock - $quantity;
                $this->productService->updateStock($productId, $newStock); // Use ProductService for stock update

                $itemTotal = $quantity * $pricePerUnit;
                $grandTotal += $itemTotal;
                $billItemsDetails[] = [
                    'product_id' => $productId, // Store as string, Eloquent will handle ObjectId conversion
                    'product_name' => $product->name,
                    'quantity' => $quantity,
                    'price_per_unit' => $pricePerUnit,
                    'item_total' => $itemTotal,
                ];

                // Low stock/out of stock notifications
                $lowStockThreshold = $product->low_stock_threshold ?? 5;
                if ($newStock <= $lowStockThreshold && $newStock > 0) {
                    $this->notificationService->create("Low stock: {$product->name} ({$newStock} left).", 'warning', 'admin', 0, "Low Stock Alert");
                } elseif ($newStock == 0) {
                    $this->notificationService->create("Out of stock: {$product->name}.", 'error', 'admin', 0, "Out of Stock");
                }
            }

            $bill = Bill::create([
                'items' => $billItemsDetails,
                'total_amount' => $grandTotal,
                'user_id' => $userId,
                'username' => $username,
            ]);

            if (!$bill) {
                throw new Exception("Failed to save the bill to the database.");
            }

            $this->notificationService->create(
                "Bill #{$bill->id} (Amount: â‚¹" . number_format($grandTotal, 2) . ") generated by {$username}.",
                'success', 'admin', 7000, "Bill Generated"
            );

            return ['success' => true, 'billId' => (string)$bill->id, 'totalAmount' => $grandTotal, 'message' => 'Bill generated successfully.'];
        }); // End DB transaction
    }

    public function getAllBills()
    {
        return Bill::orderBy('created_at', 'desc')->get();
    }

    public function getBillById(string $billId): ?Bill
    {
        return Bill::find($billId);
    }
}